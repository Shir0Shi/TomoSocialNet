{"version":3,"file":"static/js/408.eabfe885.chunk.js","mappings":"gLACA,EAA0B,yBAA1B,EAAiE,6BAAjE,EAA4G,6BAA5G,EAAgJ,sBAAhJ,EAAiL,0BAAjL,EAAwP,2BAAxP,EAAiS,6BAAjS,EAA6U,8BAA7U,EAAyX,6B,SCgBzX,EARmB,SAACA,GAEhB,OACA,gBAAKC,UAAWC,EAAa,IAA7B,UACA,UAAC,KAAD,CAASC,GAAI,YAAYH,EAAMI,GAA/B,WAAmC,gBAAKC,IAAKL,EAAMM,KAAO,KAAON,EAAMO,SAE1E,ECHD,EALkC,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,QACtC,OACI,gBAAKR,UAAWC,EAAhB,UAAmC,gBAAKD,UAAWO,EAAON,EAAoBA,EAA3C,SAAgEO,KAE1G,E,wCCVD,EAA2B,6BAA3B,EAA6E,uCAA7E,EAAsI,oCCUhIC,GAAeC,EAAAA,EAAAA,GAAU,KAc/B,GAAeC,EAAAA,EAAAA,GAA8B,CAACC,KAAM,UAApD,EAZwD,SAACb,GACrD,OAAO,0BACH,kBAAMc,SAAUd,EAAMe,aAAcd,UAAWC,EAA/C,WACI,gBAAKD,UAAWC,EAAhB,UACKc,EAAAA,EAAAA,IAAgC,UAAU,cAAe,CAACN,GAAeO,EAAAA,OAE9E,gBAAKhB,UAAWC,EAAhB,UACI,2CAIf,ICYD,EAvBiC,SAACF,GAC9B,IAAIkB,EAAQlB,EAAMmB,WACdC,EAAiBF,EAAMG,QAAQC,KAAI,SAAAC,GAAM,OAAI,SAAC,EAAD,CAAYnB,GAAMmB,EAAOnB,GAAoBG,KAAQgB,EAAOhB,KAAMD,IAAOiB,EAAOjB,KAA9CiB,EAAOnB,GAA7C,IACzCoB,EAAkBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAACC,EAAD,CAAUlB,QAAUiB,EAAEjB,QAAoBD,KAAY,GAANkB,EAAEtB,IAAdsB,EAAEtB,GAA1C,IAG1C,OAAO,iBAAKH,UAAWC,EAAhB,WACH,gBAAKD,UAAWC,EAAhB,SACKkB,KAEL,iBAAKnB,UAAWC,EAAhB,WACA,gBAAKD,UAAWC,EAAhB,SACKsB,KAEL,gBAAKvB,UAAWC,EAAhB,UACQ,SAAC,EAAD,CAAiBY,SAXX,SAACc,GAAD,OAAgC5B,EAAM6B,YAAYD,EAAOE,YAAzD,WAerB,E,wCCFD,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAfkB,SAACd,GAEnB,MAAQ,CACJC,WAAYD,EAAMC,WAEzB,IACwB,SAACc,GACtB,MAAQ,CACJJ,YAAa,SAACK,GACVD,EAASE,EAAAA,EAAAA,WAAmBD,IAC5BD,GAASG,EAAAA,EAAAA,OAAM,UAClB,EAER,IAGGC,EAAAA,EAFJ,CAGEC,E","sources":["webpack://react-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","webpack://react-app/./src/components/Dialogs/DialogsForm/DialogForm.module.css?aceb","components/Dialogs/DialogsForm/DialogsForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__nTOr-\",\"dialogItems\":\"Dialogs_dialogItems__220uJ\",\"messageBody\":\"Dialogs_messageBody__Qdt-D\",\"item\":\"Dialogs_item__4mSBz\",\"messages\":\"Dialogs_messages__y+uwf\",\"active\":\"Dialogs_active__QW2W8\",\"chatInput\":\"Dialogs_chatInput__IIE3K\",\"userMessage\":\"Dialogs_userMessage__tcsuo\",\"otherMessage\":\"Dialogs_otherMessage__z6nhV\",\"messageItem\":\"Dialogs_messageItem__YRpww\"};","import { NavLink } from 'react-router-dom';\r\nimport style from './../Dialogs.module.css';\r\n\r\ntype Props = {\r\n    id: number,\r\n    ava: string | null,\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: Props) =>{\r\n    \r\n    return (\r\n    <div className={style.item + ' ' /*+ style.active*/}>\r\n    <NavLink to={\"/dialogs/\"+props.id}><img src={props.ava || \"\"} />{props.name}</NavLink>\r\n    </div>);\r\n}\r\n\r\nexport default DialogItem;","import style from './../Dialogs.module.css';\r\n\r\ntype Props = {\r\n    user: boolean,\r\n    message : string\r\n}\r\n\r\nconst Messages: React.FC<Props> = ({user, message}) =>{\r\n    return(\r\n        <div className={style.messageItem}><div className={user ? style.userMessage : style.otherMessage}>{message}</div></div>\r\n    );\r\n}\r\nexport default Messages;","// extracted by mini-css-extract-plugin\nexport default {\"chatForm\":\"DialogForm_chatForm__Kh-kt\",\"chatInputContainer\":\"DialogForm_chatInputContainer__1Cve6\",\"chatInputButton\":\"DialogForm_chatInputButton__j-QGB\"};","import React from \"react\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { maxLength } from \"../../../utils/Validators\";\r\nimport { createField, Textarea } from \"../../common/FormControls/FormControls\";\r\nimport { NewMessageFormType } from \"../Dialogs\";\r\nimport style from './DialogForm.module.css';\r\n\r\ntype DialogFormKeysType = Extract<keyof NewMessageFormType, string>\r\n\r\ntype Props = {}\r\n\r\nconst maxLength500 = maxLength(1000);\r\nconst DialogForm: React.FC<\r\nInjectedFormProps<NewMessageFormType, Props> & Props> = (props)=>{\r\n    return(<div >\r\n        <form onSubmit={props.handleSubmit} className={style.chatForm}>\r\n            <div className={style.chatInputContainer}>\r\n                {createField<DialogFormKeysType>(\"Message\",\"messageText\", [maxLength500], Textarea)}\r\n            </div>\r\n            <div className={style.chatInputButton}>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    </div>)\r\n}\r\nexport default reduxForm<NewMessageFormType>({form: 'dialog'})(DialogForm);\r\n","import DialogItem from './DialogItem/DialogItem';\r\nimport style from './Dialogs.module.css';\r\nimport Messages from './Message/Message';\r\nimport React from 'react';\r\nimport DialogContainer from './DialogsForm/DialogsForm';\r\nimport { AppStateType } from '../../redux/reduxStore';\r\nimport { InitialStateType } from '../../redux/dialogsReducer';\r\n\r\ntype Props = {\r\n    dialogPage:  InitialStateType,\r\n    messageSend: (text: string)=>void\r\n}\r\n\r\nconst Dialogs: React.FC<Props> = (props)=>{\r\n    let state = props.dialogPage;\r\n    let dialogElements = state.dialogs.map(dialog => <DialogItem id = {dialog.id} key={dialog.id} name = {dialog.name} ava = {dialog.ava}/>);\r\n    let messageElements = state.messages.map(m => <Messages message ={m.message} key={m.id} user={m.id!=3 ? true: false} />);\r\n    let messageSend = (values: NewMessageFormType) => props.messageSend(values.messageText);\r\n\r\n    return(<div className={style.dialogs}>\r\n        <div className={style.dialogItems}>\r\n            {dialogElements}        \r\n        </div>\r\n        <div className={style.messageBody}>\r\n        <div className={style.messages}>\r\n            {messageElements}            \r\n        </div>\r\n        <div className={style.chatInput}>\r\n                <DialogContainer onSubmit={messageSend}/>\r\n        </div>\r\n        </div>\r\n    </div>);\r\n}\r\nexport type NewMessageFormType = {\r\n    messageText: string\r\n}\r\nexport default Dialogs;","import React from 'react';\r\nimport { actions } from '../../redux/dialogsReducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from \"react-redux\";\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\r\nimport {compose, Dispatch} from \"redux\";\r\nimport { reset } from 'redux-form';\r\nimport { AppStateType } from '../../redux/reduxStore';\r\n\r\ntype MapStatePropsType = {\r\n    dialogPage: AppStateType[\"dialogPage\"]\r\n}\r\nexport type MapDispatchDialogPropsType = {\r\n    messageSend: (newMessage: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType):MapStatePropsType=>{\r\n\r\n    return ({\r\n        dialogPage: state.dialogPage\r\n    });\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch):MapDispatchDialogPropsType=>{\r\n    return ({\r\n        messageSend: (newMessage: string)=>{ \r\n            dispatch(actions.addMessage(newMessage)); \r\n            dispatch(reset('dialog'));\r\n        }\r\n    });\r\n}\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchDialogPropsType, {}, AppStateType>(mapStateToProps,mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"names":["props","className","style","to","id","src","ava","name","user","message","maxLength500","maxLength","reduxForm","form","onSubmit","handleSubmit","createField","Textarea","state","dialogPage","dialogElements","dialogs","map","dialog","messageElements","messages","m","Message","values","messageSend","messageText","compose","connect","dispatch","newMessage","actions","reset","withAuthRedirect","Dialogs"],"sourceRoot":""}